"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import math
import rotatable

class TestRotatableRotateAndTranslate( unittest.TestCase ):

    def setUp( self ):
        self.expected_x = 100
        self.expected_y = 200
        self.expected_dx = 1.5
        self.expected_dy = -2.5
        self.expected_rotation = 90
        self.expected_world_width = 600
        self.expected_world_height = 400

        self.constructed_obj = rotatable.Rotatable( self.expected_x, self.expected_y, self.expected_dx, self.expected_dy, self.expected_rotation, self.expected_world_width, self.expected_world_height )
        
        return

    def tearDown( self ):
        return

    def test001_rotatesPointOnXAxis( self ):
        rotation = 90.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x = 10
        y = 0
        expected_x = 0
        expected_y = 10
        ( rotated_x, rotated_y ) = self.constructed_obj.rotatePoint( x, y )
        self.assertAlmostEqual( rotated_x, expected_x )
        self.assertAlmostEqual( rotated_y, expected_y )
        return
    
    def test002_rotatesPointOnYAxis( self ):
        rotation = 90.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x = 0
        y = 10
        expected_x = -10
        expected_y = 0
        ( rotated_x, rotated_y ) = self.constructed_obj.rotatePoint( x, y )
        self.assertAlmostEqual( rotated_x, expected_x )
        self.assertAlmostEqual( rotated_y, expected_y )
        return
    
    def test003_rotatesPointOnNegativeXAxis( self ):
        rotation = 90.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x = -10
        y = 0
        expected_x = 0
        expected_y = -10
        ( rotated_x, rotated_y ) = self.constructed_obj.rotatePoint( x, y )
        self.assertAlmostEqual( rotated_x, expected_x )
        self.assertAlmostEqual( rotated_y, expected_y )
        return
    
    def test004_rotatesPointOnNegativeYAxis( self ):
        rotation = 90.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x = 0
        y = -10
        expected_x = 10
        expected_y = 0
        ( rotated_x, rotated_y ) = self.constructed_obj.rotatePoint( x, y )
        self.assertAlmostEqual( rotated_x, expected_x )
        self.assertAlmostEqual( rotated_y, expected_y )
        return
    
    def test005_rotatesMixedPoint( self ):
        rotation = 45.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x =  math.sqrt( 2 )
        y =  math.sqrt( 2 )
        expected_x = 0
        expected_y = 2
        ( rotated_x, rotated_y ) = self.constructed_obj.rotatePoint( x, y )
        self.assertAlmostEqual( rotated_x, expected_x )
        self.assertAlmostEqual( rotated_y, expected_y )
        return
    
    def test006_rotatesMixedPoint( self ):
        rotation = 135.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x =  -math.sqrt( 2 )
        y =   math.sqrt( 2 )
        expected_x = 0
        expected_y = -2
        ( rotated_x, rotated_y ) = self.constructed_obj.rotatePoint( x, y )
        self.assertAlmostEqual( rotated_x, expected_x )
        self.assertAlmostEqual( rotated_y, expected_y )
        return
    
    def test007_rotatesMixedPoint( self ):
        rotation = 225.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x =  -math.sqrt( 2 )
        y =  -math.sqrt( 2 )
        expected_x = 0
        expected_y = 2
        ( rotated_x, rotated_y ) = self.constructed_obj.rotatePoint( x, y )
        self.assertAlmostEqual( rotated_x, expected_x )
        self.assertAlmostEqual( rotated_y, expected_y )
        return

    def test010_translatesPointPositive( self ):
        x = 10
        y = 20
        expected_x = 110
        expected_y = 220
        ( translated_x, translated_y ) = self.constructed_obj.translatePoint( x, y )
        self.assertAlmostEqual( translated_x, expected_x )
        self.assertAlmostEqual( translated_y, expected_y )
        return
        
    def test011_translatesPointNegative( self ):
        x = -10
        y = -20
        expected_x = 90
        expected_y = 180
        ( translated_x, translated_y ) = self.constructed_obj.translatePoint( x, y )
        self.assertAlmostEqual( translated_x, expected_x )
        self.assertAlmostEqual( translated_y, expected_y )
        return
    
    def test020_rotatesAndTranslatesPoint( self ):
        rotation = 45.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x = math.sqrt( 2 )
        y = -math.sqrt( 2 )
        expected_x = 102
        expected_y = 200
        ( new_x, new_y ) = self.constructed_obj.rotateAndTranslatePoint( x, y )
        self.assertAlmostEqual( new_x, expected_x )
        self.assertAlmostEqual( new_y, expected_y )
        return
    
    def test021_rotatesAndTranslatesPoint( self ):
        rotation = 45.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        x = math.sqrt( 2 )
        y = math.sqrt( 2 )
        expected_x = 100
        expected_y = 202
        ( new_x, new_y ) = self.constructed_obj.rotateAndTranslatePoint( x, y )
        self.assertAlmostEqual( new_x, expected_x )
        self.assertAlmostEqual( new_y, expected_y )
        return
    
    def test030_rotatesAndTranslatesPointList( self ):
        rotation = 45.0
        self.constructed_obj.rotate( rotation - self.constructed_obj.getRotation( ) )
        points = [ ( math.sqrt( 2 ), -math.sqrt( 2 ) ),
                   ( math.sqrt( 2 ), math.sqrt( 2 ) ),
                   ( -math.sqrt( 2 ), math.sqrt( 2 ) ),
                   ( -math.sqrt( 2 ), -math.sqrt( 2 ) ) ]
        new_points = self.constructed_obj.rotateAndTranslatePointList( points )
        self.assertAlmostEqual( new_points[ 0 ][ 0 ], 102 )
        self.assertAlmostEqual( new_points[ 0 ][ 1 ], 200 )
        self.assertAlmostEqual( new_points[ 1 ][ 0 ], 100 )
        self.assertAlmostEqual( new_points[ 1 ][ 1 ], 202 )
        self.assertAlmostEqual( new_points[ 2 ][ 0 ],  98 )
        self.assertAlmostEqual( new_points[ 2 ][ 1 ], 200 )
        self.assertAlmostEqual( new_points[ 3 ][ 0 ], 100 )
        self.assertAlmostEqual( new_points[ 3 ][ 1 ], 198 )
        return
    
    
def suite( ):
    return unittest.TestLoader( ).loadTestsFromTestCase( TestRotatableRotateAndTranslate )

if __name__ == '__main__':
    runner = unittest.TextTestRunner( )
    runner.run( suite( ) )
