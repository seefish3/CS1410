"""
Do Not Edit this file. You may and are encouraged to look at it for reference.
"""

import unittest
import math
import rock

class TestRockCreatePolygon( unittest.TestCase ):

    def setUp( self ):
        self.expected_x = 100
        self.expected_y = 200
        self.expected_dx = 0.0
        self.expected_dy = 0.0
        self.expected_rotation = 0
        self.expected_world_width = 600
        self.expected_world_height = 400

        self.constructed_obj = rock.Rock( self.expected_x, self.expected_y, self.expected_world_width, self.expected_world_height )
        
        return

    def tearDown( self ):
        return

    def test001_generatesCorrectNumberOfPoints( self ):
        number_of_points = 5
        radius           = 1.0
        
        random_polygon = self.constructed_obj.createRandomPolygon( radius, number_of_points )

        self.assertEqual( len( random_polygon ), number_of_points )
        return
    
    def test002_generatesCorrectRadius( self ):
        number_of_points = 5
        radius           = 1.0
        min_radius       = 0.7
        max_radius       = 1.3
        
        random_polygon = self.constructed_obj.createRandomPolygon( radius, number_of_points )

        for random_point in random_polygon:
            ( x, y ) = random_point
            random_distance = math.sqrt( x * x + y * y )
            self.assertGreaterEqual( random_distance, min_radius )
            self.assertLessEqual( random_distance, max_radius )
        return
    
    def test003_generatesCorrectAngle72( self ):
        number_of_points = 5
        radius           = 1.0
        expected_angle   = 72
        
        random_polygon = self.constructed_obj.createRandomPolygon( radius, number_of_points )
        
        previous_angle = None
        for random_point in random_polygon:
            ( x, y ) = random_point
            current_angle = math.degrees( math.atan2( y, x ) )
            if previous_angle is not None:
                actual_angle = ( current_angle - previous_angle ) % 360
                self.assertAlmostEqual( actual_angle , expected_angle )
            previous_angle = current_angle
        return
    
    def test004_generatesCorrectAngle60( self ):
        number_of_points = 6
        radius           = 1.0
        expected_angle   = 60
        
        random_polygon = self.constructed_obj.createRandomPolygon( radius, number_of_points )
        
        previous_angle = None
        for random_point in random_polygon:
            ( x, y ) = random_point
            current_angle = math.degrees( math.atan2( y, x ) )
            if previous_angle is not None:
                actual_angle = ( current_angle - previous_angle ) % 360
                self.assertAlmostEqual( actual_angle , expected_angle )
            previous_angle = current_angle
        return
    
    def test005_generatesCorrectRadius100( self ):
        number_of_points = 5
        radius           = 100.0
        min_radius       = 70.0
        max_radius       = 130.0
        
        random_polygon = self.constructed_obj.createRandomPolygon( radius, number_of_points )

        for random_point in random_polygon:
            ( x, y ) = random_point
            random_distance = math.sqrt( x * x + y * y )
            self.assertGreaterEqual( random_distance, min_radius )
            self.assertLessEqual( random_distance, max_radius )
        return
    
    
def suite( ):
    return unittest.TestLoader( ).loadTestsFromTestCase( TestRockCreatePolygon )

if __name__ == '__main__':
    runner = unittest.TextTestRunner( )
    runner.run( suite( ) )
